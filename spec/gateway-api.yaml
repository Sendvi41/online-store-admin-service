openapi: 3.0.2
info:
  title: gateway-api
  version: "1.0.0"
  description: 'gateway-api'
tags:
  - name: admin-service
    description: Access to functionality of admin
  - name: customer-service
    description: Access to functionality of customer
paths:
  /products:
    get:
      tags:
        - admin-service
      summary: Get all products
      description: Get all products
      parameters:
        - name: page
          in: path
          description: number of page
          required: false
          schema:
            type: integer
        - name: size
          in: path
          description: size of page
          required: false
          schema:
           type: integer
      responses:
        '200':
          description: Get list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductEntity'
    post:
      tags:
        - admin-service
      summary: Add a new product
      description: Add a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
        required: true
      responses:
        '200':
          description: Product is added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductEntity'
        '400':
          description: Validation is failed
  /products/{id}:
    get:
      tags:
        - admin-service
      summary: Get product by id
      description: Get product by id
      parameters:
        - name: id
          in: path
          description: id of product
          required: true
          schema:
            type: long
      responses:
        '200':
          description: Get product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductEntity'
        '400':
          description: Invalid ID
        '404':
          description: Product is not found
    put:
      tags:
        - admin-service
      summary: Update product by id
      description: Update product by id
      parameters:
        - name: id
          in: path
          description: ID of product
          required: true
          schema:
            type: long
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
        required: true
      responses:
        '200':
          description: Product is updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductEntity'
        '400':
          description: Validation is failed
        '404':
          description: Product is not found
    delete:
      tags:
        - admin-service
      summary: Delete product by id
      description: Delete product by id
      parameters:
        - name: id
          in: path
          description: ID of product
          required: true
          schema:
            type: long
      responses:
        '200':
          description: Product is deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDto'
        '400':
          description: Invalid ID
        '404':
          description: Product is not found
  /{productId}/upload-image:
    post:
      tags:
        - admin-service
      summary: Upload image for product
      description: Upload image for product
      parameters:
          - name: productId
            in: path
            description: id of product
            required: true
            schema:
              type: long
      requestBody:
          content:
            multipart/form-data:
              schema:
                type: object
          required: true
      responses:
        '200':
          description: Image of product is uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDto'
        '400':
          description: Invalid ID
        '404':
          description: Product is not found
  /users:
    post:
      tags:
        - customer-service
      summary: Create new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestDto'
      responses:
        '200':
          description: User is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          description: Invalid request
  /products/search:
    post:
      tags:
        - customer-service
      summary: Find all products by criteria
      description: Find all products by criteria
      parameters:
          - name: page
            in: path
            description: number of page
            required: false
            schema:
              type: integer
          - name: size
            in: path
            description: size of page
            required: false
            schema:
              type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchProductRequestDto'
      responses:
        '200':
          description: Get list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductEntity'
  /basket/{userId}:
    get:
      tags:
        - customer-service
      summary: Get all items of basket by userId
      description: Get all items of basket by userId
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: long
      responses:
        '200':
          description: Get list of products of basket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketItemsDto'
        '400':
          description: Invalid ID
        '404':
          description: The user is not found
    post:
      tags:
        - customer-service
      summary: Add item to basket
      description: Add item to basket
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: long
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddItemDto'
      responses:
        '200':
          description: The item is added to basket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDto'
        '400':
          description: Invalid ID
        '404':
          description: The product or user not found
  /basket/{itemId}:
    delete:
      tags:
        - customer-service
      summary: Delete item from basket
      description: Delete item from basket
      parameters:
        - name: itemId
          in: path
          description: ID of item of basket
          required: true
          schema:
            type: long
      responses:
        '200':
          description: Item is deleted from basket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDto'
        '400':
          description: Invalid ID
        '404':
          description: Item is not found
  /order/{userId}:
    post:
      tags:
        - customer-service
      summary: Create order for user
      description: Create order for user
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: long
      responses:
        '200':
          description: Order is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '400':
          description: Invalid ID
        '404':
          description: User not found
    get:
      tags:
        - customer-service
      summary: Ger all orders for user
      description: Ger all orders for user
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: long
        - name: page
          in: path
          description: number of page
          required: false
          schema:
            type: integer
        - name: size
          in: path
          description: size of page
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Get all orders for user
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/OrderDto'
        '400':
          description: Invalid ID
        '404':
          description: User is not found
components:
  schemas:
    ProductEntity:
      properties:
        id:
          type: long
        name:
          type: string
        category:
          type: string
        amount:
          type: integer
        price:
          type: integer
        date:
          type: string
    ProductDto:
      properties:
        name:
          type: string
        category:
          type: string
        amount:
          type: integer
        price:
          type: integer
        date:
          type: string
    MessageDto:
      properties:
        name:
          type: string
    CreateUserRequestDto:
      properties:
        name:
          type: string
          required: true
        middlename:
          type: string
          required: false
        lastname:
          type: string
          required: true
        birthday:
          type: date
        gender:
          type: string
          required: true
        city:
          type: string
          required: false
        phoneNumbder:
          type: string
          required: false
        email:
          type: string
          required: false
    UserEntity:
      properties:
        id:
          type: long
        name:
          type: string
        middlename:
          type: string
        lastname:
          type: string
        birthday:
          type: date
        gender:
          type: string
        city:
          type: string
        phoneNumbder:
          type: string
        email:
          type: string
    SearchProductRequestDto:
      properties:
        name:
          type: string
        category:
          type: string
    BasketItemsDto:
      properties:
        basketId:
           type: long
        userId:
           type:  long
        items:
           type: array
           items:
              $ref: '#/components/schemas/ItemDto'
    ItemDto:
      properties:
        id:
          type: long
        productId:
          type: long
        amount:
          type: integer
    AddItemDto:
      properties:
        productId:
          type: long
        amount:
          type: integer
    OrderDto:
      properties:
        id:
          type: long
        date:
          type: date
        status:
          type: string
        userId:
          type: long
        orderedProducts:
          type: array
          items:
           $ref: '#/components/schemas/OrderedProductDto'
    OrderedProductDto:
      properties:
          id:
            type: long
          productId:
            type: long
          amount:
            type: integer
          price:
            type: number